import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
import logging
import sqlite3

from states import RegStates, OrderStates
from keyboards import role_kb, customer_kb, worker_kb, get_order_inline_kb
from utils import format_order, is_valid_date

from config import API_TOKEN, DB_NAME, ADMINS
from db import (
    add_user, get_user_by_telegram_id, add_order, get_orders_by_customer,
    assign_order_to_worker, get_free_orders, set_order_status, get_orders_by_worker,
    delete_order, delete_done_orders
)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        await message.answer(
            "üëã <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            parse_mode="HTML"
        )
        return
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkBot!</b>\n\n"
        "üìù –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã.\n"
        "üëá –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_kb,
        parse_mode="HTML"
    )
    await state.set_state(RegStates.choosing_role)

def update_user_role(telegram_id, new_role):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET role = ? WHERE telegram_id = ?", (new_role, telegram_id))
    conn.commit()
    conn.close()

@dp.message(Command("changerole"))
async def cmd_changerole(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=role_kb)
    await state.set_state(RegStates.choosing_role)

@dp.message(RegStates.choosing_role)
async def process_role(message: Message, state: FSMContext):
    if message.text == "–Ø –∑–∞–∫–∞–∑—á–∏–∫":
        role = "customer"
    elif message.text == "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        role = "worker"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        update_user_role(message.from_user.id, role)
        await message.answer(
            f"–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'–∑–∞–∫–∞–∑—á–∏–∫' if role == 'customer' else '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}!",
            reply_markup=customer_kb if role == "customer" else worker_kb
        )
    else:
        add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            role=role
        )
        await message.answer(
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {'–∑–∞–∫–∞–∑—á–∏–∫' if role == 'customer' else '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}!",
            reply_markup=customer_kb if role == "customer" else worker_kb
        )
    await state.clear()

@dp.message(Command("addorder"))
async def start_add_order(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "customer":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, VK, Telegram, Instagram):")
    await state.set_state(OrderStates.waiting_for_platform)

@dp.message(OrderStates.waiting_for_platform)
async def order_platform(message: Message, state: FSMContext):
    await state.update_data(platform=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(OrderStates.waiting_for_quantity)

@dp.message(OrderStates.waiting_for_quantity)
async def order_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-01):")
    await state.set_state(OrderStates.waiting_for_deadline)

@dp.message(OrderStates.waiting_for_deadline)
async def order_deadline(message: Message, state: FSMContext):
    if not is_valid_date(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
        return
    data = await state.get_data()
    platform = data["platform"]
    quantity = data["quantity"]
    deadline = message.text

    user = get_user_by_telegram_id(message.from_user.id)
    add_order(
        customer_id=user[0],
        platform=platform,
        quantity=quantity,
        deadline=deadline
    )
    await message.answer(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n–ü–ª–æ—â–∞–¥–∫–∞: {platform}\n–ö–æ–ª-–≤–æ: {quantity}\n–î–µ–¥–ª–∞–π–Ω: {deadline}")
    await state.clear()

@dp.message(Command("help"))
async def cmd_help(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    if user[3] == "customer":
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/orders ‚Äî –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
            "/addorder ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n\n"
            "‚ùóÔ∏è –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>–£–¥–∞–ª–∏—Ç—å</b> –ø–æ–¥ –Ω—É–∂–Ω—ã–º –∑–∞–∫–∞–∑–æ–º.",
            parse_mode="HTML",
            reply_markup=customer_kb
        )
    elif user[3] == "worker":
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/orders ‚Äî –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
            "/workorders ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "/myorders ‚Äî –≤–∞—à–∏ –≤–∑—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n\n"
            "‚ùóÔ∏è –î–ª—è –≤–∑—è—Ç–∏—è –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ <b>–í–∑—è—Ç—å –∑–∞–∫–∞–∑</b> –∏ <b>–ó–∞–≤–µ—Ä—à–∏—Ç—å</b> –ø–æ–¥ –∑–∞–∫–∞–∑–æ–º.",
            parse_mode="HTML",
            reply_markup=worker_kb
        )
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        await message.answer(
            f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"ID: <code>{user[0]}</code>\n"
            f"Username: @{user[2]}\n"
            f"–†–æ–ª—å: <i>{user[3]}</i>",
            parse_mode="HTML"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("orders"))
async def cmd_orders(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    if user[3] == "customer":
        orders = get_orders_by_customer(user[0])
    else:
        orders = get_orders_by_worker(user[0])
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    else:
        for order in orders:
            await message.answer(
                format_order(order),
                parse_mode="HTML",
                reply_markup=get_order_inline_kb(order[0], user[3], order[6])
            )

@dp.message(Command("workorders"))
async def cmd_workorders(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "worker":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return
    orders = get_free_orders()
    if not orders:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        for order in orders:
            await message.answer(
                format_order(order),
                parse_mode="HTML",
                reply_markup=get_order_inline_kb(order[0], user[3], order[6])
            )

@dp.message(Command("myorders"))
async def cmd_myorders(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "worker":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return
    orders = get_orders_by_worker(user[0])
    if not orders:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        for order in orders:
            await message.answer(
                format_order(order),
                parse_mode="HTML",
                reply_markup=get_order_inline_kb(order[0], user[3], order[6])
            )

@dp.callback_query(lambda c: c.data.startswith("take_"))
async def process_take_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    success = assign_order_to_worker(order_id, user[0])
    if success:
        await callback.message.edit_text("–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!", parse_mode="HTML")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("done_"))
async def process_done_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    set_order_status(order_id, "done")
    delete_done_orders()
    await callback.message.edit_text("–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω –∏ —É–¥–∞–ª—ë–Ω!", parse_mode="HTML")

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def process_delete_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    success = delete_order(order_id, user[0])
    if success:
        await callback.message.edit_text("–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω!", parse_mode="HTML")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)

@dp.message(Command("takeorder"))
async def cmd_takeorder(message: Message):
    await message.answer("–¢–µ–ø–µ—Ä—å –∑–∞–∫–∞–∑—ã –±–µ—Ä—É—Ç—Å—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –∑–∞–∫–∞–∑–æ–º!")

@dp.message(Command("done"))
async def cmd_done(message: Message):
    await message.answer("–¢–µ–ø–µ—Ä—å –∑–∞–≤–µ—Ä—à–∞—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –∑–∞–∫–∞–∑–æ–º!")

@dp.message(Command("deleteorder"))
async def cmd_deleteorder(message: Message):
    await message.answer("–¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º –∑–∞–∫–∞–∑–æ–º!")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())