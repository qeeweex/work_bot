from aiogram.fsm.context import FSMContext
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from config import ADMINS
from db import (
    get_order_by_id, get_user_by_id, get_user_by_telegram_id,
    get_free_orders, assign_order_to_worker,
    set_order_status, get_user_by_telegram_id, get_orders_by_worker
)
from keyboards import get_order_inline_kb
from utils import format_order

router = Router()

@router.message(Command("workorders"))
async def cmd_workorders(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "worker":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return
    orders = get_free_orders()
    if not orders:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        for order in orders:
            await message.answer(
                format_order(order),
                parse_mode="HTML",
                reply_markup=get_order_inline_kb(order[0])
            )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>\n"
        "/workorders ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
        "/myorders ‚Äî –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
        "‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
        parse_mode="HTML"
    )


@router.message(Command("myorders"))
async def my_orders_handler(message: types.Message):
    user = get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if user[3] != "worker":
        await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /changerole, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å.")
        return

    orders = get_orders_by_worker(user[0])  # user[0] ‚Äî —ç—Ç–æ user.id
    if not orders:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return

    for order in orders:
        text = format_order(order)
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"done_{order[0]}")]
        ])
        await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

@router.callback_query(F.data.startswith("done_"))
async def done_order_handler(callback: types.CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    order = get_order_by_id(order_id)

    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    set_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω")
    await callback.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback.message.answer(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π.")
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("take_"))
async def process_take_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    success = assign_order_to_worker(order_id, user[0])
    if success:
        await callback.message.edit_text("–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!", parse_mode="HTML")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("done_"))
async def process_done_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    set_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω")
    order = get_order_by_id(order_id)
    customer = get_user_by_id(order[1])
    telegram_id = customer[1]  # (id, telegram_id, ...)
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n"
        "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"confirm_{order_id}")]
    ])
    await callback.bot.send_message(
        telegram_id,
        f"üìù <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏, –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.",
        reply_markup=confirm_kb,
        parse_mode="HTML"
    )
    for admin_id in ADMINS:
        await callback.bot.send_message(
            admin_id,
            f"üîî <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º</b>\n"
            "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º.",
            parse_mode="HTML"
        )

@router.message(Command("testworker"))
async def test_handler(message: types.Message):
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ worker.py —Å—Ä–∞–±–æ—Ç–∞–ª!")  # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    await message.answer("‚úÖ worker.py –ø–æ–¥–∫–ª—é—á—ë–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")