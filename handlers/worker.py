from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from config import ADMINS
from db import (
    get_order_by_id, get_user_by_id, get_user_by_telegram_id,
    get_free_orders, get_orders_by_worker, assign_order_to_worker,
    set_order_status, get_orders_by_worker_and_status
)
from keyboards import get_order_inline_kb, history_filter_kb
from utils import format_order
from aiogram.fsm.state import StateFilter

router = Router()

@router.message(Command("workorders"))
async def cmd_workorders(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "worker":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.")
        return
    orders = get_free_orders()
    if not orders:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
    else:
        for order in orders:
            await message.answer(
                format_order(order),
                parse_mode="HTML",
                reply_markup=get_order_inline_kb(order[0])
            )

@router.message(Command("myorders"))
async def cmd_myorders(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∑–∞–∫–∞–∑—ã –ø–æ–∫–∞–∑–∞—Ç—å:", reply_markup=history_filter_kb)
    await state.set_state("waiting_for_worker_order_status")

@router.message(StateFilter("waiting_for_worker_order_status"), lambda m: m.text in ["–ê–∫—Ç–∏–≤–Ω—ã–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ"])
async def show_worker_orders_by_status(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    status_map = {
        "–ê–∫—Ç–∏–≤–Ω—ã–µ": "–ê–∫—Ç–∏–≤–µ–Ω",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "–í—ã–ø–æ–ª–Ω–µ–Ω",
        "–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ": "–û—Ç–º–µ–Ω—ë–Ω"
    }
    status = status_map[message.text]
    orders = get_orders_by_worker_and_status(user[0], status)
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.")
    else:
        for order in orders:
            await message.answer(format_order(order), parse_mode="HTML")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("take_"))
async def process_take_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    success = assign_order_to_worker(order_id, user[0])
    if success:
        await callback.message.edit_text("–í—ã –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!", parse_mode="HTML")
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–∫–∞–∑.", show_alert=True)

@router.callback_query(lambda c: c.data.startswith("done_"))
async def process_done_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    user = get_user_by_telegram_id(callback.from_user.id)
    set_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω")
    order = get_order_by_id(order_id)
    customer = get_user_by_id(order[1])
    telegram_id = customer[1]  # (id, telegram_id, ...)
    await callback.message.edit_text(
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!</b>\n"
        "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑—á–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"confirm_{order_id}")]
    ])
    await callback.bot.send_message(
        telegram_id,
        f"üìù <b>–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n"
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏, –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.",
        reply_markup=confirm_kb,
        parse_mode="HTML"
    )
    for admin_id in ADMINS:
        await callback.bot.send_message(
            admin_id,
            f"üîî <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º</b>\n"
            "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–æ–º.",
            parse_mode="HTML"
        )