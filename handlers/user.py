from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from db import (
    get_user_by_telegram_id, add_user, update_user_role, add_order,
    set_order_status, delete_done_orders
)
from keyboards import role_kb, customer_kb, worker_kb
from states import RegStates, OrderStates
from utils import is_valid_date
from config import ADMINS

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        await message.answer(
            "üëã <b>–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
            parse_mode="HTML"
        )
        return
    await message.answer(
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkBot!</b>\n\n"
        "üìù –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã.\n"
        "üëá –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=role_kb,
        parse_mode="HTML"
    )
    await state.set_state(RegStates.choosing_role)

@router.message(Command("help"))
async def cmd_help(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    if user[3] == "worker":
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</b>\n"
            "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/workorders ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
            "/myorders ‚Äî –º–æ–∏ –∑–∞–∫–∞–∑—ã\n"
            "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
            "‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</b>\n"
            "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
            "/orders ‚Äî –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã\n"
            "/addorder ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑\n"
            "/changerole ‚Äî —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n"
            "‚ùóÔ∏è –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.",
            parse_mode="HTML"
        )

@router.message(Command("changerole"))
async def cmd_changerole(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=role_kb)
    await state.set_state(RegStates.choosing_role)

@router.message(RegStates.choosing_role)
async def process_role(message: Message, state: FSMContext):
    if message.text == "–Ø –∑–∞–∫–∞–∑—á–∏–∫":
        role = "customer"
    elif message.text == "–Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å":
        role = "worker"
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        update_user_role(message.from_user.id, role)
        await message.answer(
            f"–í–∞—à–∞ —Ä–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {'–∑–∞–∫–∞–∑—á–∏–∫' if role == 'customer' else '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}!",
            reply_markup=customer_kb if role == "customer" else worker_kb
        )
    else:
        add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            role=role
        )
        await message.answer(
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {'–∑–∞–∫–∞–∑—á–∏–∫' if role == 'customer' else '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'}!",
            reply_markup=customer_kb if role == "customer" else worker_kb
        )
    await state.clear()

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        await message.answer(
            f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"ID: <code>{user[0]}</code>\n"
            f"Username: @{user[2]}\n"
            f"–†–æ–ª—å: <i>{user[3]}</i>",
            parse_mode="HTML"
        )
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@router.message(Command("addorder"))
async def start_add_order(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user or user[3] != "customer":
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤.")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, VK, Telegram, Instagram):")
    await state.set_state(OrderStates.waiting_for_platform)

@router.message(OrderStates.waiting_for_platform)
async def order_platform(message: Message, state: FSMContext):
    await state.update_data(platform=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(OrderStates.waiting_for_quantity)

@router.message(OrderStates.waiting_for_quantity)
async def order_quantity(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(quantity=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-01):")
    await state.set_state(OrderStates.waiting_for_deadline)

@router.message(OrderStates.waiting_for_deadline)
async def order_deadline(message: Message, state: FSMContext):
    if not is_valid_date(message.text):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.")
        return
    data = await state.get_data()
    platform = data["platform"]
    quantity = data["quantity"]
    deadline = message.text

    user = get_user_by_telegram_id(message.from_user.id)
    add_order(
        customer_id=user[0],
        platform=platform,
        quantity=quantity,
        deadline=deadline
    )
    await message.answer(f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!\n–ü–ª–æ—â–∞–¥–∫–∞: {platform}\n–ö–æ–ª-–≤–æ: {quantity}\n–î–µ–¥–ª–∞–π–Ω: {deadline}")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("confirm_"))
async def process_confirm_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    set_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω")
    delete_done_orders()
    await callback.message.edit_text(
        "üëç <b>–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞!</b>\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª—ë–Ω.",
        parse_mode="HTML"
    )
    for admin_id in ADMINS:
        await callback.bot.send_message(
            admin_id,
            f"üí∏ <b>–ó–∞–∫–∞–∑ ‚Ññ{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∑–∞–∫–∞–∑—á–∏–∫–æ–º!</b>\n"
            "–ú–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é.",
            parse_mode="HTML"
        )
